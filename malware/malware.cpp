#include <cpen333/process/subprocess.h>
#include <cpen333/process/shared_memory.h>
#include <chrono>
#include <thread>
#include <string>
#include <iostream>

#define MAGIC 13

// Usage:
//    malware <name> <index>
// name is any name
// index is 0 or 1
// defaults to name:malware, index:0
int main(int argc, char* argv[]) {

	// extract name and index
	int index = 0;
	std::string name = "malware";
	if (argc > 1) {
		name = argv[1];
	}

	if (argc > 2) {
		index = std::atoi(argv[2]);
	}

	std::cout << name << " " << std::to_string(index) << " started" << std::endl;

	//========================================================
	// TODO: CREATE AND INITIALIZE SHARED MEMORY
	cpen333::process::shared_object<int> memory(std::ref(name));
	if (*memory.get() < MAGIC)
		cpen333::process::shared_memory(name, sizeof(int));
	if (*memory.get() < MAGIC)
		cpen333::process::shared_object<int> memory(std::ref(name));				

	//========================================================

	int oindex = (index + 1) % 2;  // index of other malware process

	auto t1 = std::chrono::high_resolution_clock::now();
	int* mem = (int*)memory.get();
	*mem = MAGIC; // 
	int _num = *mem;
	double dur;
	while (true) {
		std::cout << name << " " << std::to_string(index) << " running" << std::endl;

		//=======================================================
		// TODO: CHECK IF OTHER PROCESS MISSED CHECK-IN(S)
		if (abs(*mem - _num) > 2) {
			t1 = std::chrono::high_resolution_clock::now();
		}
		//       - LAUNCH IF NOT RESPONDING
		auto t2 = std::chrono::high_resolution_clock::now();
		auto duration = t2 - t1;
		auto duration_s = std::chrono::duration_cast<std::chrono::seconds>(duration);
		double dur = duration_s.count();
		
		if (dur > 10.0)
			cpen333::process::subprocess("malware spawned_malware 1", true, false);
			
		_num = *mem;
		*mem += 1;

		std::cout << "num: " << _num << std::endl;
		std::cout << "mem: " << *mem << std::endl;
		//=======================================================

		std::this_thread::sleep_for(std::chrono::seconds(10));
	}

	memory.unlink();
	return 0;
}